/* Snowcap pest grammar */

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

COMMENT           = _{ SingleLineComment }
SingleLineComment =  { "//" ~ (!"\n" ~ ANY)* }

container = {
    "{" ~ ("<" ~ attributes ~ ">")? ~ (!container ~ element)? ~ "}"
}

row    = { (^"row" | "-") ~ (id)? ~ ("<" ~ attributes ~ ">")? ~ element_list }
column = { (^"column" | ^"col" | "|") ~ (id)? ~ ("<" ~ attributes ~ ">")? ~ element_list }
stack  = { (^"stack" | "^") ~ (id)? ~ ("<" ~ attributes ~ ">")? ~ element_list }

element_list = _{ "[" ~ element ~ ("," ~ element)* ~ "]" }

widget = { label ~ (id)? ~ ("<" ~ attributes ~ ">")? ~ "(" ~ (element_value | element)? ~ ")" }

element = _{ (module | widget | row | column | stack | container) }

// Consume everything inside <, > to pass to AttributeParser
attributes = @{ (!("<" | ">") ~ ANY)* }

id = { "#" ~ label }

element_value = _{ module | value }
array         =  { "[" ~ value ~ ("," ~ value)* ~ "]" }
value         =  { string | number | boolean | null | array }

module = { label ~ "!" ~ "{" ~ module_arguments ~ "}" }

// Consume everything inside {, } to pass to ModuleParser
module_arguments = @{ (!("{" | "}") ~ ANY)* }

boolean = { "true" | "false" }

null = { "null" }

label = @{ (ASCII_ALPHA | "-")* }

string = ${ "\"" ~ inner ~ "\"" }
inner  = @{ char* }
char   =  {
    !("\"" | "\\") ~ ANY
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

number = @{
    "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

markup = _{ SOI ~ (container) ~ EOI }
